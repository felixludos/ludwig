## Task: Extract Structured Features from a User Sentence

You are given a sentence from a user in a **conversational recommendation system**. Your task is to extract structured features from the sentence using the following schema. Each field is defined and illustrated with examples.

---

## Schema Fields and Feature Definitions

### `sentence` (string)

* The original user sentence as text.
* Example: `"I want something with shrimp, but not fried."`

---

### `intentions` (array of string categories)

Describes the user’s underlying **communication goals**. A sentence may serve multiple intentions.

**Allowed values**:

```yaml
Preference:
  description: The user expresses what they want, like, or are open to.
  example: "I want Mexican or Italian food."

Information:
  description: The user provides information about an item or about themselves.
  example: "I have two dogs."

Constraint:
  description: The user imposes a limitation, restriction, or condition.
  example: "Nothing with nuts."

Request:
  description: The user asks the assistant to take an action.
  example: "Please show me more travel articles."

Goal:
  description: The user states an objective or reason for their preferences.
  example: "I'm planning meals for the whole week."

Feedback:
  description: The user comments on the system’s behavior or outputs.
  example: "You're not using my previous answers."

Correction:
  description: The user corrects themselves or the assistant.
  example: "Actually, I meant vegetarian, not vegan."

Encouragement:
  description: The user gives praise or expresses appreciation.
  example: "Thanks, those look great!"

Satisfaction:
  description: The user signals they are pleased with the results.
  example: "These recipes are perfect."

Rejection:
  description: The user dismisses or refuses a suggestion.
  example: "That’s not what I was asking for."

Other:
  description: Any intent not covered above (use intentions_type_other to clarify).
  example: "It's hard to explain, but I'm looking for something fun and relaxing."
```

If you include `"Other"` as one of the `intentions`, also describe the intention in the `intentions_type_other` field. E.g., `"Explanation, Achievement"`

---

### `polarity` (string)

Describes the **overall sentiment** of the sentence. Note that polarity is overall sentiment; attribute-level polarity may differ.

**Allowed values**:

```yaml
Positive:
  description: Liking, satisfaction, or acceptance
  example: "I love these suggestions."
Negative:
  description: Dislike, complaint, or rejection
  example: "I don’t want anything spicy."
Neutral:
  description: Descriptive or factual, no clear sentiment
  example: "I’m planning a trip to Europe."
Mixed:
  description: Both positive and negative sentiment
  example: "I liked the suggestions, but none were vegetarian."
```

---

### `epistemic_modality` (string)

Reflects the **degree of certainty** or commitment to the information provided.

**Allowed values**:

```yaml
Certain:
  description: Confident and definite
  example: "I definitely want something quick to cook."
Tentative:
  description: Unsure or exploratory
  example: "I think I might like something spicy."
Uncertain:
  description: Indecisive or explicitly unsure
  example: "I don’t really know what I want."
Unspecified:
  description: Degree of certainty cannot be determined
  example: "Show me some ideas."
```

---

### `sentence_type` (string)

The **grammatical structure** of the sentence.

**Allowed values**:

```yaml
Declarative:
  description: Statement or description
  example: "I want beef and broccoli stir-fry."
Interrogative:
  description: Question or inquiry
  example: "What are some good healthy snacks?"
Imperative:
  description: Command or instruction
  example: "Show me more recipes with tofu."
Conditional:
  description: Hypothetical or dependent clause
  example: "If it's too spicy, I won’t eat it."
Unspecified:
  description: Cannot be determined or malformed
  example: "Hmm, maybe just something different?"
```

---

### `clause_types` (array of strings)

Describes **logical relationships** between clauses in the sentence.

**Allowed values**:

```yaml
Cause:
  description: Explains why something is true
  example: "I want something quick because I’m busy tonight."
Purpose:
  description: Indicates an intention
  example: "I'm meal prepping for the week."
Condition:
  description: Depends on a scenario
  example: "If it’s vegetarian, that’s fine."
Contrast:
  description: Offers opposing ideas
  example: "I like beef, but not in soup."
Concession:
  description: Acknowledges an exception
  example: "Even though I like spicy food, it upsets my stomach."
Additive:
  description: Adds more information
  example: "And also with rice on the side."
Exception:
  description: Specifies exclusions
  example: "Anything except seafood."
```


---

### `attribute_mentions` (array of objects)

For each **attribute** the user mentions, provide:

* Example 1: (news) Starting from `"I am looking for articles about current events, especially in the US, but definitely not about celebrity gossip."`, two attributes should be extracted, something like:
  ```json
  {
    "attribute": "topic",
    "value": "current events, especially in the US",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Topic",
    "intensity": "Moderate",
    "priority": "Strong",
    "inclusivity": "Inclusive"
  },
  {
    "attribute": "topic",
    "value": "celebrity gossip",
    "attribute_polarity": "Negative",
    "preference_type": "Explicit Dispreference",
    "attribute_type": "Topic",
    "intensity": "Strong",
    "priority": "Strong",
    "inclusivity": "Exclusive"
  }

  ```
* Example 2: (food) Starting from `"Can you find something high-protein, under 30 minutes, and ideally dairy-free."`, three attributes should be extracted:
  ```json
  {
    "attribute": "protein",
    "value": "high-protein",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Dietary",
    "intensity": "Moderate",
    "priority": "Strong",
    "inclusivity": "Inclusive"
  },
  {
    "attribute": "time",
    "value": "under 30 minutes",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Temporal",
    "intensity": "Moderate",
    "priority": "Moderate",
    "inclusivity": "Inclusive"
  },
  {
    "attribute": "dietary restriction",
    "value": "dairy-free",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Dietary",
    "intensity": "Moderate",
    "priority": "Low",
    "inclusivity": "Exclusive"
  }
  ```
* Example 3: (travel) Starting from `"I'm quite stressed at work, and am in dire need of a relaxing vacation on a quiet beach"`, two attributes should be extracted:
  ```json
  {
    "attribute": "activity",
    "value": "relaxing vacation",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Social",
    "intensity": "Strong",
    "priority": "Moderate",
    "inclusivity": "Inclusive"
  },
  {
    "attribute": "location",
    "value": "quiet beach",
    "attribute_polarity": "Positive",
    "preference_type": "Explicit Preference",
    "attribute_type": "Spatial",
    "intensity": "Moderate",
    "priority": "Moderate",
    "inclusivity": "Inclusive"
  }
  ```


#### `attribute` (string)

* The name of the attribute being discussed.
* Examples: `"cuisine"`, `"price"`, `"location"`, `"dietary"`.

#### `value` (string)

* The specific value or quality of the attribute the user is referencing.
* Examples: `"Italian"`, `"cheap"`, `"under 1 hour"`.

#### `attribute_polarity` (string)

* The sentiment associated with the attribute value.

**Allowed values**:

```yaml
Positive:
  description: Liking it (positive)
  example: "I love Italian food"
Negative:
  description: Disliking it (negative)
  example: "I don’t want seafood"
Neutral:
  description: Neutral sentiment
  example: "I want something quick"
```

#### `preference_type` (string)

* Classifies how the attribute is expressed.

**Allowed values**:

```yaml
Explicit Preference:
  description: Positive preference
  example: "I love spicy food"
Explicit Dispreference:
  description: Negative preference
  example: "Not seafood"
Constraint:
  description: Constraint or requirement
  example: "Must be under 30 minutes"
Unspecified:
  description: No clear preference or constraint
  example: "Show me some ideas"
```

#### `attribute_type` (string)

* The kind of constraint expressed, if applicable.

**Allowed values**:

```yaml
Spatial:
  description: Location-related (e.g., "nearby")
  example: "in the city"
Temporal:
  description: Time-related (e.g., "within 30 minutes")
  example: "for the weekend"
Budgetary:
  description: Cost-related (e.g., "under $20")
  example: "on a budget"
Dietary:
  description: Food preferences (e.g., "vegetarian")
  example: "gluten-free"
Topic:
  description: Subject matter (e.g., "technology")
  example: "politics"
Cultural:
  description: Cultural aspects (e.g., "local cuisine")
  example: "Mexican food"
Safety:
  description: Safety concerns (e.g., "family-friendly")
  example: "kid-friendly"
Health:
  description: Health-related aspects (e.g., "nutritious")
  example: "low-calorie"
Social:
  description: Social aspects (e.g., "popular")
  example: "trending"
Other:
  description: Other types not listed
  example: "political climate"
None:
  description: No specific type
  example: "none"
```

If you choose `"Other"` as the `attribute_type`, also provide a better fit in the `attribute_type_other` field.

#### `intensity` (string)

* How strongly the user expresses this preference or constraint - i.e. the strength of expression

**Allowed values**:

```yaml
Low:
  description: Weakly expressed
  example: "I might like something spicy"
Moderate:
  description: Moderately or normally expressed
  example: "I like something spicy"
Strong:
  description: Strongly expressed
  example: "I definitely want something spicy"
```

#### `priority` (string)

* How important this attribute is to the user - i.e. importance of the attribute in context

**Allowed values**:

```yaml
Low:
  description: Not very important
  example: "It could be entertaining"
Moderate:
  description: No explicit priority mentioned
  example: "I want something entertaining"
Strong:
  description: Very important
  example: "Most importantly, the article should be entertaining"
```

#### `inclusivity` (string)

* Whether the user is expanding or narrowing the set of acceptable options.

**Allowed values**:

```yaml
Inclusive:
  description: Expanding the set of options
  example: "I want something spicy or sweet"
Exclusive:
  description: Narrowing down the options
  example: "I want something spicy, not sweet"
Mixed:
  description: Both expanding and narrowing
  example: "I want something spicy, but not too hot"
Unspecified:
  description: Cannot be determined
  example: "I want something different"
```

---

### `reference_to_past_turns` (boolean)

* `true` if the user refers to earlier conversation turns.
* Example: `"As I said before, I want vegetarian options."`

---

### `meta_dialogue` (boolean)

* `true` if the user talks about how the system is responding.
* Example: `"You’re not listening to my input."`

---

### `self_correction` (boolean)

* `true` if the user updates or retracts their own earlier input.
* Example: `"Actually, not pasta—maybe rice."`

---

### `item_focused` (integer: 0–3)

The sentence discusses the recommended items or their attributes - this includes preferences for content (e.g., article topics), food properties (e.g., spicy, healthy), travel features (e.g., beachside), etc.

**Features**:
* Mentions of item types ("articles", "meals", "destinations")
* Specific attribute values ("spicy", "vegan", "romantic setting")
* Comparisons between item alternatives
* Constraints on item features (e.g., "no seafood")

**Allowed values**:

```yaml
0:
  meaning: None
  example: "That’s not what I meant." # No item discussed
1:
  meaning: Weak
  example: "Something like what you showed me yesterday." # Implicit item reference
2:
  meaning: Moderate
  example: "I’d like Italian or Thai food." # Clear item type + values
3:
  meaning: Strong
  example: "I want protein-rich meals under 30 minutes, preferably vegetarian and spicy, but not sweet." # Detailed constraints on multiple item attributes
```

#### `user_focused` (integer: 0–3)

The sentence provides information about the user’s situation, goals, preferences, or personal context - which helps the assistant personalize recommendations.

**Features**:
* Statements about goals ("I'm meal prepping", "for a family trip")
* Mentions of constraints from user lifestyle, budget, health
* User state or cognitive stance ("I don’t know", "I’m open to suggestions")

**Allowed values**:

```yaml
0:
  meaning: None
  example: "No onions." # Only item-focused, nothing about user state
1:
  meaning: Weak
  example: "Just something simple." # Minimal indirect hint of user need
2:
  meaning: Moderate
  example: "I'm looking for something quick for after work." # Describes time/context
3:
  meaning: Strong
  example: "I'm planning a surprise anniversary dinner and need something elegant, affordable, and not too complicated to make." # Rich detail about user situation, goals, and constraints
```

#### `system_focused` (integer: 0–3)

The sentence evaluates, critiques, refers to, or commands the recommendation assistant or the system - either its previous outputs or its behavior.

**Features**:
* Feedback about relevance, quality, or coverage of suggestions
* References to the assistant's misunderstanding or misinterpretation
* Meta-comments about how the system functions ("you didn’t use my last input")
* Explicit system control ("don’t show me that again")

**Allowed values**:

```yaml
0:
  meaning: None
  example: "I want a sandwich." # Purely item-focused
1:
  meaning: Weak
  example: "You know what I like." # Vague reference to system role
2:
  meaning: Moderate
  example: "These suggestions weren’t very helpful." # Direct, moderate feedback
3:
  meaning: Strong
  example: "I asked for vegetarian meals, but you gave me meat. You’re not using the feedback I gave in the previous turn." # Detailed, critical feedback on system behavior and output
```

## Sentence

Here is the sentence to analyze:

{question}

{task_context}